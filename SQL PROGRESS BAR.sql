--DROP PROC sdp_LongRunningSPROC 
--GO
CREATE PROCEDURE sdp_LongRunningSPROC 
@INSERT_THIS_NUM_OF_RECORDS BIGINT 
AS 
SET NOCOUNT ON 
-- IF TABLE EXISTS BECAUSE YOU PREVIOUSLY CANCELLED THIS STORED PROCEDURE THEN DROP IT AND START FRE 
IF OBJECT_ID('SPROC_PROGRESS','U') IS NOT NULL  
DROP TABLE SPROC_PROGRESS 
DECLARE @RN BIGINT 
-- USE THIS TABLE TO RECORD PROGRESS 
CREATE TABLE SPROC_PROGRESS(PK BIGINT IDENTITY(1,1), NUM_OF_RECS BIGINT, ON_REC_NUMBER BIGINT) 
-- INSERT THE ONLY RECORD (THIS IS THE RECORD YOU CAN SELECT FROM ANOTHER STORED PROCEDURE TO GET PR 
INSERT SPROC_PROGRESS (NUM_OF_RECS, ON_REC_NUMBER) VALUES (0,0) 
-- SET LOCAL VARIABLE RECORD_NUMBER TO 0 
-- (THIS IS THE CURRENT RECORD I AM ON IN MY LOOP, WE WILL CHANGE THIS DURING LOOP TO REFLECT P 
SET @RN = 0 
-- CREATE MY TEMP TABLE THAT I AM -- GOING TO PUT 10,000 RECORDS INTO 
CREATE TABLE #MyTempTable(PK BIGINT IDENTITY(1,1), REC_NUMBER VARCHAR(200)) 
-- SET THE TOTAL RECORD NUMBER SO YOU CAN USE THIS IN YOUR APP 
-- TO SHOW THE TOTAL NUMBER OF RECORDS -- AND THE CURRENT RECORD YOU ARE ON. 
-- THIS WAY YOU CAN SHOW PROGRESS 
UPDATE SPROC_PROGRESS SET NUM_OF_RECS = (@INSERT_THIS_NUM_OF_RECORDS) WHERE PK = 1 
-- This is our long running stored procedure. During an appropriate part of the loop we update the p 
-- ALSO WORK GREAT WITH CURSORS! 
WHILE (SELECT @RN) < @INSERT_THIS_NUM_OF_RECORDS 
BEGIN
	-- DO WORK
	SET @RN = (@RN + 1)
	INSERT #MyTempTable (REC_NUMBER) VALUES ('This is Record #' + CONVERT(VARCHAR(20),@RN))
	-- UPDATE PROGRESS
	UPDATE SPROC_PROGRESS SET ON_REC_NUMBER = ((SELECT SP_PROGRESS.ON_REC_NUMBER FROM SPROC_PROGRESS SP_PROGRESS WHERE PK=1)+1)WHERE PK=1
END 
SELECT * FROM #MyTempTable 
DROP TABLE #MyTempTable 
DROP TABLE SPROC_PROGRESS 
GO 
--*********************************************** 
--Execute LongRunningSP like this: 
EXEC sdp_LongRunningSPROC 10000 
--********************************************** 
--Open an extra window in query analyzer while long running sp is running and get progress like this 
SELECT * FROM SPROC_PROGRESS
